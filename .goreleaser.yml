# This is an example .goreleaser.yml file with some sane defaults.
# Make sure to check the documentation at http://goreleaser.com
builds:
  - env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm64
    ignore:
      - goos: windows
        goarch: arm64
    main: ./cmd/imgpkg
    binary: imgpkg-{{ .Os }}-{{ .Arch }}

    flags:
      - -trimpath

    ldflags:
      - -X carvel.dev/imgpkg/pkg/imgpkg/cmd.Version={{ .Version }}

archives:
  - format: binary
    name_template: "{{ .Binary }}"
    replacements:
      darwin: Darwin
      linux: Linux
      windows: Windows
      amd64: x86_64
checksum:
  name_template: 'checksums.txt'
  algorithm: sha256
  disable: false
signs:
  - artifacts: checksum
    certificate: '${artifact}.pem'
    cmd: cosign
    args:
      - sign-blob
      - "--yes"
      - '--output-certificate=${certificate}'
      - '--output-signature=${signature}'
      - '${artifact}'
    output: true
snapshot:
  name_template: "{{ .Tag }}-next"
release:
  # Repo in which the release will be created.
  github:
    owner: carvel-dev
    name: imgpkg

  # If set to true, will not auto-publish the release.
  draft: true

  # If set to auto, will mark the release as not ready for production
  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1
  # If set to true, will mark the release as not ready for production.
  # Default is false.
  prerelease: auto

  # use to change the name of the release.
  name_template: "{{.Tag}}"

  # You can disable this pipe in order to not upload any artifacts.
  # Defaults to false.
  disable: false

changelog:
  # Set it to true if you wish to skip the changelog generation.
  # This may result in an empty release notes on GitHub/GitLab/Gitea.
  skip: false

  # Sorts the changelog by the commit's messages.
  # Could either be asc, desc or empty
  # Default is empty
  sort: asc

  filters:
    # Commit messages matching the regexp listed here will be removed from
    # the changelog
    # Default is empty
    exclude:
      - '^docs:'
      - typo

release:
  prerelease: auto
  header: |
    ## Installation

    To install `{{ .ProjectName }}`, download one of the pre-built binaries provided for your platform from the artifacts attached to this release.

    For instance, if you are using Linux on an AMD64 architecture:

    ```shell
    # Download the binary
    curl -LO https://github.com/{{ .Env.GITHUB_REPOSITORY }}/releases/download/{{ .Tag }}/{{ .ProjectName }}-v{{ .Version }}.linux.amd64

    # Move the binary in to your PATH
    mv {{ .ProjectName }}-v{{ .Version }}.linux.amd64 /usr/local/bin/{{ .ProjectName }}

    # Make the binary executable
    chmod +x /usr/local/bin/{{ .ProjectName }}
    ```

    ### Verify checksums file signature

    The checksums file provided within the artifacts attached to this release is signed using [Cosign](https://docs.sigstore.dev/cosign/overview/) with GitHub OIDC. To validate the signature of this file, run the following commands:

    ```shell
    # Download the checksums file, certificate and signature
    curl -LO https://github.com/{{ .Env.GITHUB_REPOSITORY }}/releases/download/{{ .Tag }}/{{ .ProjectName }}-v{{ .Version }}.checksums.txt
    curl -LO https://github.com/{{ .Env.GITHUB_REPOSITORY }}/releases/download/{{ .Tag }}/{{ .ProjectName }}-v{{ .Version }}.checksums.pem
    curl -LO https://github.com/{{ .Env.GITHUB_REPOSITORY }}/releases/download/{{ .Tag }}/{{ .ProjectName }}-v{{ .Version }}.checksums.sig

    # Verify the checksums file
    cosign verify-blob {{ .ProjectName }}-v{{ .Version }}.checksums.txt \
      --certificate {{ .ProjectName }}-v{{ .Version }}.checksums.pem \
      --signature {{ .ProjectName }}-v{{ .Version }}.checksums.sig \
      --certificate-identity-regexp=https://github.com/{{ .Env.GITHUB_REPOSITORY_OWNER }} \
      --certificate-oidc-issuer=https://token.actions.githubusercontent.com
    ```

    ### Verify binary integrity

    To verify the integrity of the downloaded binary, you can utilize the checksums file after having validated its signature:

    ```shell
    # Verify the binary using the checksums file
    sha256sum -c {{ .ProjectName }}-v{{ .Version }}.checksums.txt --ignore-missing
    ```

    ## Container Images
    
    The `{{ .ProjectName }}` binaries are also available as container images, based on Debian (slim) and Alpine Linux. The Debian-based container images include any dependencies which may be required to make use of certain key services, such as GnuPG, AWS KMS, Azure Key Vault, and Google Cloud KMS. The Alpine-based container images are smaller in size, but do not include these dependencies.

    These container images are available for the following architectures: `linux/amd64` and `linux/arm64`.

    ### GitHub Container Registry

    - `ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}`
    - `ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine`

    ### Quay.io

    - `quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}`
    - `quay.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }}-alpine`

    ### Verify container image signature

    The container images are signed using [Cosign](https://docs.sigstore.dev/cosign/overview/) with GitHub OIDC. To validate the signature of an image, run the following command:

    ```shell
    cosign verify ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Version }} \
      --certificate-identity-regexp=https://github.com/{{ .Env.GITHUB_REPOSITORY_OWNER }} \
      --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
      -o text
    ```